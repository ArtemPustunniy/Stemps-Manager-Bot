import sqlite3
import pandas as pd
import io
from google_sheets.manager import GoogleSheetManager
from .telegram import send_telegram_message
from bot.utils.role_manager import role_manager


async def check_for_updates(redis_client):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫, –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —è—á–µ–µ–∫ –∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫,
    —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ –æ—Ç –±–æ—Ç–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    with sqlite3.connect("users.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id FROM users WHERE role = 'manager'")
        manager_ids = [row[0] for row in cursor.fetchall()]

    for manager_id in manager_ids:
        spreadsheet_name = str(manager_id)
        sheet_manager = GoogleSheetManager(spreadsheet_name)
        new_data = sheet_manager.read_all_data()

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ "–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        if '–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π' not in new_data.columns:
            new_data['–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π'] = ''  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

        # –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Redis
        redis_key = f"google_sheets_data_{manager_id}"
        old_data_str = await redis_client.get(redis_key, encoding="utf-8")

        if old_data_str is None:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Redis –µ—â—ë –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            await redis_client.set(redis_key, new_data.to_json())
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON
        if not old_data_str or not old_data_str.strip():
            await send_telegram_message(f"–û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Redis –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id}. –°–±—Ä–∞—Å—ã–≤–∞—é –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            await redis_client.set(redis_key, new_data.to_json())
            continue

        try:
            # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º StringIO
            old_data = pd.read_json(io.StringIO(old_data_str))
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∂–µ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ "–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            if '–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π' not in old_data.columns:
                old_data['–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π'] = ''
        except ValueError as e:
            await send_telegram_message(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id}: {str(e)}. –°–±—Ä–∞—Å—ã–≤–∞—é –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            await redis_client.set(redis_key, new_data.to_json())
            continue

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –±–æ—Ç–æ–º
        old_data_bot_changes = old_data[old_data['–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π'] == 'bot'].index
        new_data_bot_changes = new_data[new_data['–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π'] == 'bot'].index

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –±–æ—Ç–æ–º, –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        old_data_filtered = old_data.drop(old_data_bot_changes)
        new_data_filtered = new_data.drop(new_data_bot_changes)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        message = f"üîî –í —Ç–∞–±–ª–∏—Ü–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id} –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–µ –æ—Ç –±–æ—Ç–∞):\n"
        changes = []

        # 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–µ–∫
        if not old_data_filtered.empty and not new_data_filtered.empty:
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            common_indices = old_data_filtered.index.intersection(new_data_filtered.index)
            if not common_indices.empty:
                old_common = old_data_filtered.loc[common_indices].reset_index(drop=True)
                new_common = new_data_filtered.loc[common_indices].reset_index(drop=True)
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ —Å—Ç—Ä–æ–∫–∏
                for idx in range(len(old_common)):
                    for col in old_common.columns:
                        if col == '–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π':
                            continue
                        old_value = old_common.iloc[idx][col]
                        new_value = new_common.iloc[idx][col]
                        if pd.isna(old_value) and pd.isna(new_value):
                            continue
                        if old_value != new_value:
                            changes.append(
                                f"- –Ø—á–µ–π–∫–∞ [{common_indices[idx]}, {col}]: –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å '{old_value}' –Ω–∞ '{new_value}'"
                            )

        # 2. –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        added_rows = set(new_data_filtered.index) - set(old_data_filtered.index)
        if added_rows:
            for idx in added_rows:
                row_data = new_data_filtered.loc[idx].drop('–ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π').to_dict()
                changes.append(f"- –°—Ç—Ä–æ–∫–∞ {idx} –¥–æ–±–∞–≤–ª–µ–Ω–∞: {row_data}")

        # 3. –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        deleted_rows = set(old_data_filtered.index) - set(new_data_filtered.index)
        if deleted_rows:
            for idx in deleted_rows:
                changes.append(f"- –°—Ç—Ä–æ–∫–∞ {idx} —É–¥–∞–ª–µ–Ω–∞")

        if changes:
            message += "\n".join(changes)
        else:
            message += "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–æ –≤—Å–µ –æ–Ω–∏ –æ—Ç –±–æ—Ç–∞."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if changes:
            await send_telegram_message(message)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Redis
        await redis_client.set(redis_key, new_data.to_json())